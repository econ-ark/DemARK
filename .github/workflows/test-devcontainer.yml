name: Test Development Container

on:
  push:
    paths:
      - '.devcontainer/**'
      - '.github/workflows/test-devcontainer.yml'
  pull_request:
    paths:
      - '.devcontainer/**'
      - '.github/workflows/test-devcontainer.yml'
  workflow_dispatch:

jobs:
  test-devcontainer:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and test devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: demark-devcontainer
          push: never
          runCmd: |
            # Run the container validation script
            bash .devcontainer/test-container.sh
            
            # Test basic notebook functionality (if notebooks exist)
            if [ -d "notebooks" ] && [ "$(ls -A notebooks/*.ipynb 2>/dev/null)" ]; then
              echo "Testing basic notebook execution..."
              # Test one simple notebook to verify the environment
              python -c "
              import nbformat
              from nbconvert.preprocessors import ExecutePreprocessor
              import os
              
              # Find a simple notebook to test
              notebook_files = [f for f in os.listdir('notebooks') if f.endswith('.ipynb')]
              simple_notebooks = [
                  'Gentle-Intro-To-HARK-PerfForesightCRRA.ipynb',
                  'FisherTwoPeriod.ipynb',
                  'PerfForesightCRRA-SavingRate.ipynb'
              ]
              
              # Try to find a simple notebook first
              test_notebook = None
              for simple in simple_notebooks:
                  if simple in notebook_files:
                      test_notebook = simple
                      break
              
              if not test_notebook and notebook_files:
                  test_notebook = notebook_files[0]
              
              if test_notebook:
                  notebook_path = os.path.join('notebooks', test_notebook)
                  try:
                      print(f'Testing notebook: {test_notebook}')
                      with open(notebook_path, 'r') as f:
                          nb = nbformat.read(f, as_version=4)
                      
                      # Execute with a short timeout for CI
                      ep = ExecutePreprocessor(timeout=60, kernel_name='python3')
                      ep.preprocess(nb, {'metadata': {'path': 'notebooks/'}})
                      print(f'‚úÖ Successfully executed test notebook: {test_notebook}')
                  except Exception as e:
                      print(f'‚ö†Ô∏è  Notebook execution test failed (this might be expected): {e}')
                      # Don't fail the CI for notebook execution issues
              else:
                  print('‚ö†Ô∏è  No notebooks found for testing')
              "
            else
              echo "‚ö†Ô∏è  No notebooks directory found for testing"
            fi
            
            # Test diagnostic tools if they exist
            if [ -f "bisect_hark_breaking_changes.sh" ]; then
              echo "Testing bisection script..."
              ./bisect_hark_breaking_changes.sh --help || echo "‚ö†Ô∏è  Bisection script help failed (might be expected)"
            fi
            
            echo "üéâ Devcontainer test completed successfully!"

  test-docker-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker Compose setup
        run: |
          cd .devcontainer
          
          # Test that docker-compose.yml is valid
          docker-compose config
          
          # Build the services (with timeout and retry)
          timeout 600 docker-compose build demark-dev || {
            echo "Build timed out, retrying..."
            docker-compose build demark-dev
          }
          
          # Test basic container startup
          docker-compose run --rm demark-dev bash -c "
            echo 'Testing Docker Compose container...'
            eval \"\$(micromamba shell hook --shell bash)\"
            micromamba activate DemARK
            python --version
            python -c 'import numpy; print(\"NumPy version:\", numpy.__version__)'
            echo '‚úÖ Docker Compose test completed'
          "
        
      - name: Cleanup
        if: always()
        run: |
          cd .devcontainer 